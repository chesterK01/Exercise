// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pb/library.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookService_CreateBook_FullMethodName  = "/pb.BookService/CreateBook"
	BookService_GetBooks_FullMethodName    = "/pb.BookService/GetBooks"
	BookService_GetBookByID_FullMethodName = "/pb.BookService/GetBookByID"
)

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Định nghĩa service cho Book
type BookServiceClient interface {
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error)
	GetBooks(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*GetBooksResponse, error)
	GetBookByID(ctx context.Context, in *GetBookByIDRequest, opts ...grpc.CallOption) (*GetBookByIDResponse, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, BookService_CreateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBooks(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*GetBooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksResponse)
	err := c.cc.Invoke(ctx, BookService_GetBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBookByID(ctx context.Context, in *GetBookByIDRequest, opts ...grpc.CallOption) (*GetBookByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookByIDResponse)
	err := c.cc.Invoke(ctx, BookService_GetBookByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility.
//
// Định nghĩa service cho Book
type BookServiceServer interface {
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error)
	GetBooks(context.Context, *GetBooksRequest) (*GetBooksResponse, error)
	GetBookByID(context.Context, *GetBookByIDRequest) (*GetBookByIDResponse, error)
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookServiceServer struct{}

func (UnimplementedBookServiceServer) CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookServiceServer) GetBooks(context.Context, *GetBooksRequest) (*GetBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBookServiceServer) GetBookByID(context.Context, *GetBookByIDRequest) (*GetBookByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookByID not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}
func (UnimplementedBookServiceServer) testEmbeddedByValue()                     {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBooks(ctx, req.(*GetBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetBookByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBookByID(ctx, req.(*GetBookByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookService_CreateBook_Handler,
		},
		{
			MethodName: "GetBooks",
			Handler:    _BookService_GetBooks_Handler,
		},
		{
			MethodName: "GetBookByID",
			Handler:    _BookService_GetBookByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/library.proto",
}

const (
	AuthorService_CreateAuthor_FullMethodName  = "/pb.AuthorService/CreateAuthor"
	AuthorService_GetAuthors_FullMethodName    = "/pb.AuthorService/GetAuthors"
	AuthorService_GetAuthorByID_FullMethodName = "/pb.AuthorService/GetAuthorByID"
)

// AuthorServiceClient is the client API for AuthorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Định nghĩa service cho Author
type AuthorServiceClient interface {
	CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*CreateAuthorResponse, error)
	GetAuthors(ctx context.Context, in *GetAuthorsRequest, opts ...grpc.CallOption) (*GetAuthorsResponse, error)
	GetAuthorByID(ctx context.Context, in *GetAuthorByIDRequest, opts ...grpc.CallOption) (*GetAuthorByIDResponse, error)
}

type authorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorServiceClient(cc grpc.ClientConnInterface) AuthorServiceClient {
	return &authorServiceClient{cc}
}

func (c *authorServiceClient) CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*CreateAuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAuthorResponse)
	err := c.cc.Invoke(ctx, AuthorService_CreateAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) GetAuthors(ctx context.Context, in *GetAuthorsRequest, opts ...grpc.CallOption) (*GetAuthorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorsResponse)
	err := c.cc.Invoke(ctx, AuthorService_GetAuthors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) GetAuthorByID(ctx context.Context, in *GetAuthorByIDRequest, opts ...grpc.CallOption) (*GetAuthorByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorByIDResponse)
	err := c.cc.Invoke(ctx, AuthorService_GetAuthorByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorServiceServer is the server API for AuthorService service.
// All implementations must embed UnimplementedAuthorServiceServer
// for forward compatibility.
//
// Định nghĩa service cho Author
type AuthorServiceServer interface {
	CreateAuthor(context.Context, *CreateAuthorRequest) (*CreateAuthorResponse, error)
	GetAuthors(context.Context, *GetAuthorsRequest) (*GetAuthorsResponse, error)
	GetAuthorByID(context.Context, *GetAuthorByIDRequest) (*GetAuthorByIDResponse, error)
	mustEmbedUnimplementedAuthorServiceServer()
}

// UnimplementedAuthorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorServiceServer struct{}

func (UnimplementedAuthorServiceServer) CreateAuthor(context.Context, *CreateAuthorRequest) (*CreateAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) GetAuthors(context.Context, *GetAuthorsRequest) (*GetAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedAuthorServiceServer) GetAuthorByID(context.Context, *GetAuthorByIDRequest) (*GetAuthorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorByID not implemented")
}
func (UnimplementedAuthorServiceServer) mustEmbedUnimplementedAuthorServiceServer() {}
func (UnimplementedAuthorServiceServer) testEmbeddedByValue()                       {}

// UnsafeAuthorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorServiceServer will
// result in compilation errors.
type UnsafeAuthorServiceServer interface {
	mustEmbedUnimplementedAuthorServiceServer()
}

func RegisterAuthorServiceServer(s grpc.ServiceRegistrar, srv AuthorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorService_ServiceDesc, srv)
}

func _AuthorService_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_CreateAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).CreateAuthor(ctx, req.(*CreateAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_GetAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).GetAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_GetAuthors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).GetAuthors(ctx, req.(*GetAuthorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_GetAuthorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).GetAuthorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_GetAuthorByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).GetAuthorByID(ctx, req.(*GetAuthorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorService_ServiceDesc is the grpc.ServiceDesc for AuthorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthorService",
	HandlerType: (*AuthorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthor",
			Handler:    _AuthorService_CreateAuthor_Handler,
		},
		{
			MethodName: "GetAuthors",
			Handler:    _AuthorService_GetAuthors_Handler,
		},
		{
			MethodName: "GetAuthorByID",
			Handler:    _AuthorService_GetAuthorByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/library.proto",
}

const (
	AuthorBookService_CreateAuthorBook_FullMethodName              = "/pb.AuthorBookService/CreateAuthorBook"
	AuthorBookService_GetBooksByAuthorName_FullMethodName          = "/pb.AuthorBookService/GetBooksByAuthorName"
	AuthorBookService_GetAllAuthorBookRelationships_FullMethodName = "/pb.AuthorBookService/GetAllAuthorBookRelationships"
	AuthorBookService_GetAuthorBookByBookID_FullMethodName         = "/pb.AuthorBookService/GetAuthorBookByBookID"
)

// AuthorBookServiceClient is the client API for AuthorBookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Định nghĩa service cho Author_Book
type AuthorBookServiceClient interface {
	CreateAuthorBook(ctx context.Context, in *CreateAuthorBookRequest, opts ...grpc.CallOption) (*CreateAuthorBookResponse, error)
	GetBooksByAuthorName(ctx context.Context, in *GetBooksByAuthorNameRequest, opts ...grpc.CallOption) (*GetBooksByAuthorNameResponse, error)
	GetAllAuthorBookRelationships(ctx context.Context, in *GetAllAuthorBookRelationshipsRequest, opts ...grpc.CallOption) (*GetAllAuthorBookRelationshipsResponse, error)
	GetAuthorBookByBookID(ctx context.Context, in *GetAuthorBookByBookIDRequest, opts ...grpc.CallOption) (*GetAuthorBookByBookIDResponse, error)
}

type authorBookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorBookServiceClient(cc grpc.ClientConnInterface) AuthorBookServiceClient {
	return &authorBookServiceClient{cc}
}

func (c *authorBookServiceClient) CreateAuthorBook(ctx context.Context, in *CreateAuthorBookRequest, opts ...grpc.CallOption) (*CreateAuthorBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAuthorBookResponse)
	err := c.cc.Invoke(ctx, AuthorBookService_CreateAuthorBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorBookServiceClient) GetBooksByAuthorName(ctx context.Context, in *GetBooksByAuthorNameRequest, opts ...grpc.CallOption) (*GetBooksByAuthorNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksByAuthorNameResponse)
	err := c.cc.Invoke(ctx, AuthorBookService_GetBooksByAuthorName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorBookServiceClient) GetAllAuthorBookRelationships(ctx context.Context, in *GetAllAuthorBookRelationshipsRequest, opts ...grpc.CallOption) (*GetAllAuthorBookRelationshipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAuthorBookRelationshipsResponse)
	err := c.cc.Invoke(ctx, AuthorBookService_GetAllAuthorBookRelationships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorBookServiceClient) GetAuthorBookByBookID(ctx context.Context, in *GetAuthorBookByBookIDRequest, opts ...grpc.CallOption) (*GetAuthorBookByBookIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorBookByBookIDResponse)
	err := c.cc.Invoke(ctx, AuthorBookService_GetAuthorBookByBookID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorBookServiceServer is the server API for AuthorBookService service.
// All implementations must embed UnimplementedAuthorBookServiceServer
// for forward compatibility.
//
// Định nghĩa service cho Author_Book
type AuthorBookServiceServer interface {
	CreateAuthorBook(context.Context, *CreateAuthorBookRequest) (*CreateAuthorBookResponse, error)
	GetBooksByAuthorName(context.Context, *GetBooksByAuthorNameRequest) (*GetBooksByAuthorNameResponse, error)
	GetAllAuthorBookRelationships(context.Context, *GetAllAuthorBookRelationshipsRequest) (*GetAllAuthorBookRelationshipsResponse, error)
	GetAuthorBookByBookID(context.Context, *GetAuthorBookByBookIDRequest) (*GetAuthorBookByBookIDResponse, error)
	mustEmbedUnimplementedAuthorBookServiceServer()
}

// UnimplementedAuthorBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorBookServiceServer struct{}

func (UnimplementedAuthorBookServiceServer) CreateAuthorBook(context.Context, *CreateAuthorBookRequest) (*CreateAuthorBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthorBook not implemented")
}
func (UnimplementedAuthorBookServiceServer) GetBooksByAuthorName(context.Context, *GetBooksByAuthorNameRequest) (*GetBooksByAuthorNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByAuthorName not implemented")
}
func (UnimplementedAuthorBookServiceServer) GetAllAuthorBookRelationships(context.Context, *GetAllAuthorBookRelationshipsRequest) (*GetAllAuthorBookRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAuthorBookRelationships not implemented")
}
func (UnimplementedAuthorBookServiceServer) GetAuthorBookByBookID(context.Context, *GetAuthorBookByBookIDRequest) (*GetAuthorBookByBookIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorBookByBookID not implemented")
}
func (UnimplementedAuthorBookServiceServer) mustEmbedUnimplementedAuthorBookServiceServer() {}
func (UnimplementedAuthorBookServiceServer) testEmbeddedByValue()                           {}

// UnsafeAuthorBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorBookServiceServer will
// result in compilation errors.
type UnsafeAuthorBookServiceServer interface {
	mustEmbedUnimplementedAuthorBookServiceServer()
}

func RegisterAuthorBookServiceServer(s grpc.ServiceRegistrar, srv AuthorBookServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthorBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorBookService_ServiceDesc, srv)
}

func _AuthorBookService_CreateAuthorBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorBookServiceServer).CreateAuthorBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorBookService_CreateAuthorBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorBookServiceServer).CreateAuthorBook(ctx, req.(*CreateAuthorBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorBookService_GetBooksByAuthorName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksByAuthorNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorBookServiceServer).GetBooksByAuthorName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorBookService_GetBooksByAuthorName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorBookServiceServer).GetBooksByAuthorName(ctx, req.(*GetBooksByAuthorNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorBookService_GetAllAuthorBookRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAuthorBookRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorBookServiceServer).GetAllAuthorBookRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorBookService_GetAllAuthorBookRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorBookServiceServer).GetAllAuthorBookRelationships(ctx, req.(*GetAllAuthorBookRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorBookService_GetAuthorBookByBookID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorBookByBookIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorBookServiceServer).GetAuthorBookByBookID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorBookService_GetAuthorBookByBookID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorBookServiceServer).GetAuthorBookByBookID(ctx, req.(*GetAuthorBookByBookIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorBookService_ServiceDesc is the grpc.ServiceDesc for AuthorBookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorBookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthorBookService",
	HandlerType: (*AuthorBookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthorBook",
			Handler:    _AuthorBookService_CreateAuthorBook_Handler,
		},
		{
			MethodName: "GetBooksByAuthorName",
			Handler:    _AuthorBookService_GetBooksByAuthorName_Handler,
		},
		{
			MethodName: "GetAllAuthorBookRelationships",
			Handler:    _AuthorBookService_GetAllAuthorBookRelationships_Handler,
		},
		{
			MethodName: "GetAuthorBookByBookID",
			Handler:    _AuthorBookService_GetAuthorBookByBookID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/library.proto",
}
